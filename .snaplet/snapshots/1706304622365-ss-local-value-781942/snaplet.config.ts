// eslint-disable-next-line @typescript-eslint/triple-slash-reference
/// <reference path=".snaplet/snaplet.d.ts" />
// This config was generated by Snaplet make sure to check it over before using it.
import { copycat, faker } from "@snaplet/copycat";
import { defineConfig } from "snaplet";
copycat.setHashKey("Wt+SNLWAZB18oNzA");
export default defineConfig({
  select: {
    $default: false,
    public: true,
    auth: true,
  },
  transform: {
    $mode: "unsafe",
    auth: {
      audit_log_entries({ row }) {
        return {
          instance_id: copycat.uuid(row.instance_id),
          id: copycat.uuid(row.id),
          payload: {
            [copycat.word(row.payload)]: copycat.words(row.payload),
          },
          created_at: copycat.dateString(row.created_at, {
            minYear: 2020,
          }),
          ip_address: copycat.scramble(row.ip_address),
        };
      },
      flow_state({ row }) {
        return {
          id: copycat.uuid(row.id),
          user_id: copycat.uuid(row.user_id),
          code_challenge: copycat.state(row.code_challenge),
          provider_type: copycat.state(row.provider_type),
          provider_access_token: copycat.uuid(row.provider_access_token),
          provider_refresh_token: copycat.uuid(row.provider_refresh_token),
          created_at: copycat.dateString(row.created_at, {
            minYear: 2020,
          }),
          updated_at: copycat.dateString(row.updated_at, {
            minYear: 2020,
          }),
          authentication_method: copycat.uuid(row.authentication_method),
        };
      },
      identities({ row }) {
        return {
          user_id: copycat.uuid(row.user_id),
          identity_data: {
            [copycat.word(row.identity_data)]: copycat.words(row.identity_data),
          },
          provider: copycat.sentence(row.provider),
          last_sign_in_at: copycat.dateString(row.last_sign_in_at, {
            minYear: 2020,
          }),
          created_at: copycat.dateString(row.created_at, {
            minYear: 2020,
          }),
          updated_at: copycat.dateString(row.updated_at, {
            minYear: 2020,
          }),
        };
      },
      instances({ row }) {
        return {
          id: copycat.uuid(row.id),
          uuid: copycat.uuid(row.uuid),
          created_at: copycat.dateString(row.created_at, {
            minYear: 2020,
          }),
          updated_at: copycat.dateString(row.updated_at, {
            minYear: 2020,
          }),
        };
      },
      mfa_amr_claims({ row }) {
        return {
          session_id: copycat.uuid(row.session_id),
          created_at: copycat.dateString(row.created_at, {
            minYear: 2020,
          }),
          updated_at: copycat.dateString(row.updated_at, {
            minYear: 2020,
          }),
          authentication_method: copycat.uuid(row.authentication_method),
          id: copycat.uuid(row.id),
        };
      },
      mfa_challenges({ row }) {
        return {
          id: copycat.uuid(row.id),
          factor_id: copycat.uuid(row.factor_id),
          created_at: copycat.dateString(row.created_at, {
            minYear: 2020,
          }),
          verified_at: copycat.dateString(row.verified_at, {
            minYear: 2020,
          }),
          ip_address: copycat.ipv4(row.ip_address),
        };
      },
      mfa_factors({ row }) {
        return {
          id: copycat.uuid(row.id),
          user_id: copycat.uuid(row.user_id),
          friendly_name: copycat.sentence(row.friendly_name),
          created_at: copycat.dateString(row.created_at, {
            minYear: 2020,
          }),
          updated_at: copycat.dateString(row.updated_at, {
            minYear: 2020,
          }),
          secret: copycat.password(row.secret),
        };
      },
      refresh_tokens({ row }) {
        return {
          instance_id: copycat.uuid(row.instance_id),
          id: copycat
            .int(row.id, {
              min: 1,
              max: Math.pow(8, 8) - 1,
            })
            .toString(),
          token: copycat.scramble(row.token, {
            preserve: [],
          }),
          user_id: copycat.scramble(row.user_id, {
            preserve: [],
          }),
          revoked: copycat.bool(row.revoked),
          created_at: copycat.dateString(row.created_at, {
            minYear: 2020,
          }),
          updated_at: copycat.dateString(row.updated_at, {
            minYear: 2020,
          }),
          parent: copycat.scramble(row.parent),
          session_id: copycat.uuid(row.session_id),
        };
      },
      saml_providers({ row }) {
        return {
          id: copycat.uuid(row.id),
          sso_provider_id: copycat.uuid(row.sso_provider_id),
          entity_id: copycat.uuid(row.entity_id),
          metadata_xml: copycat.sentence(row.metadata_xml),
          metadata_url: faker.internet.url(),
          attribute_mapping: {
            [copycat.word(row.attribute_mapping)]: copycat.words(
              row.attribute_mapping
            ),
          },
          created_at: copycat.dateString(row.created_at, {
            minYear: 2020,
          }),
          updated_at: copycat.dateString(row.updated_at, {
            minYear: 2020,
          }),
        };
      },
      saml_relay_states({ row }) {
        return {
          id: copycat.uuid(row.id),
          sso_provider_id: copycat.uuid(row.sso_provider_id),
          request_id: copycat.uuid(row.request_id),
          for_email: copycat.email(row.for_email),
          redirect_to: faker.internet.url(),
          from_ip_address: copycat.ipv4(row.from_ip_address),
          created_at: copycat.dateString(row.created_at, {
            minYear: 2020,
          }),
          updated_at: copycat.dateString(row.updated_at, {
            minYear: 2020,
          }),
          flow_state_id: copycat.uuid(row.flow_state_id),
        };
      },
      sessions({ row }) {
        return {
          id: copycat.uuid(row.id),
          user_id: copycat.uuid(row.user_id),
          created_at: copycat.dateString(row.created_at, {
            minYear: 2020,
          }),
          updated_at: copycat.dateString(row.updated_at, {
            minYear: 2020,
          }),
          factor_id: copycat.uuid(row.factor_id),
          not_after: copycat.dateString(row.not_after, {
            minYear: 2020,
          }),
          refreshed_at: copycat.dateString(row.refreshed_at, {
            minYear: 2020,
          }),
          user_agent: copycat.userAgent(row.user_agent),
          ip: copycat.ipv4(row.ip),
          tag: copycat.timezone(row.tag),
        };
      },
      sso_domains({ row }) {
        return {
          id: copycat.uuid(row.id),
          sso_provider_id: copycat.uuid(row.sso_provider_id),
          domain: copycat.email(row.domain),
          created_at: copycat.dateString(row.created_at, {
            minYear: 2020,
          }),
          updated_at: copycat.dateString(row.updated_at, {
            minYear: 2020,
          }),
        };
      },
      sso_providers({ row }) {
        return {
          resource_id: copycat.uuid(row.resource_id),
        };
      },
      users({ row }) {
        return {
          instance_id: copycat.uuid(row.instance_id),
          id: copycat.uuid(row.id),
          role: copycat.fullName(row.role, {
            limit: 255,
          }),
          email: copycat.email(row.email, {
            limit: 255,
          }),
          encrypted_password: copycat.scramble(row.encrypted_password, {
            preserve: [],
          }),
          confirmation_token: copycat.scramble(row.confirmation_token, {
            preserve: [],
          }),
          confirmation_sent_at: copycat.dateString(row.confirmation_sent_at, {
            minYear: 2020,
          }),
          recovery_token: copycat.scramble(row.recovery_token, {
            preserve: [],
          }),
          recovery_sent_at: copycat.dateString(row.recovery_sent_at, {
            minYear: 2020,
          }),
          email_change_token_new: copycat.scramble(row.email_change_token_new, {
            preserve: [],
          }),
          email_change: copycat.email(row.email_change, {
            limit: 255,
          }),
          raw_app_meta_data: {
            [copycat.word(row.raw_app_meta_data)]: copycat.words(
              row.raw_app_meta_data
            ),
          },
          raw_user_meta_data: {
            [copycat.word(row.raw_user_meta_data)]: copycat.words(
              row.raw_user_meta_data
            ),
          },
          is_super_admin: copycat.bool(row.is_super_admin),
          phone: copycat.phoneNumber(row.phone),
          phone_confirmed_at: copycat.dateString(row.phone_confirmed_at, {
            minYear: 2020,
          }),
          phone_change: copycat.phoneNumber(row.phone_change),
          phone_change_token: copycat.scramble(row.phone_change_token, {
            preserve: [],
          }),
          phone_change_sent_at: copycat.dateString(row.phone_change_sent_at, {
            minYear: 2020,
          }),
          email_change_token_current: copycat.scramble(
            row.email_change_token_current,
            {
              preserve: [],
            }
          ),
          email_change_confirm_status: copycat.int(
            row.email_change_confirm_status,
            {
              min: 0,
              max: Math.pow(2, 8) - 1,
            }
          ),
          reauthentication_token: copycat.scramble(row.reauthentication_token, {
            preserve: [],
          }),
          reauthentication_sent_at: copycat.dateString(
            row.reauthentication_sent_at,
            {
              minYear: 2020,
            }
          ),
        };
      },
    },
  },
  subset: {
    enabled: true,
    version: "3",
    targets: [
      {
        table: "auth.users",
        rowLimit: 10,
      },
    ],
    keepDisconnectedTables: false,
    followNullableRelations: true,
    maxCyclesLoop: 0,
    eager: false,
    taskSortAlgorithm: "children",
  },
});
