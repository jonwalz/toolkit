Could not drop schema "auth", Snaplet will try to truncate all tables and related objects as a fallback: error: must be owner of schema auth
Could not drop schema "graphql", Snaplet will try to truncate all tables and related objects as a fallback: error: must be owner of schema graphql
Could not drop schema "graphql_public", Snaplet will try to truncate all tables and related objects as a fallback: error: must be owner of schema graphql_public
Could not drop schema "net", Snaplet will try to truncate all tables and related objects as a fallback: error: schema "net" does not exist
Could not drop schema "pgsodium", Snaplet will try to truncate all tables and related objects as a fallback: error: must be owner of schema pgsodium
Could not drop schema "pgsodium_masks", Snaplet will try to truncate all tables and related objects as a fallback: error: must be owner of schema pgsodium_masks
Could not drop schema "realtime", Snaplet will try to truncate all tables and related objects as a fallback: error: must be owner of schema realtime
Could not drop schema "storage", Snaplet will try to truncate all tables and related objects as a fallback: error: must be owner of schema storage
Could not drop schema "supabase_functions", Snaplet will try to truncate all tables and related objects as a fallback: error: must be owner of schema supabase_functions
Could not drop schema "vault", Snaplet will try to truncate all tables and related objects as a fallback: error: must be owner of schema vault
[Schema] Warning: schema "auth" already exists, statement: "CREATE SCHEMA auth;"
[Schema] Warning: schema "extensions" does not exist, statement: "CREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA extensions;"
[Schema] Warning: extension "pg_stat_statements" does not exist, statement: "COMMENT ON EXTENSION pg_stat_statements IS 'track planning and execution statistics of all SQL statements executed';"
[Schema] Warning: schema "extensions" does not exist, statement: "CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA extensions;"
[Schema] Warning: extension "pgcrypto" does not exist, statement: "COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';"
[Schema] Warning: schema "extensions" does not exist, statement: "CREATE EXTENSION IF NOT EXISTS pgjwt WITH SCHEMA extensions;"
[Schema] Warning: extension "pgjwt" does not exist, statement: "COMMENT ON EXTENSION pgjwt IS 'JSON Web Token API for Postgresql';"
[Schema] Warning: schema "extensions" does not exist, statement: "CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA extensions;"
[Schema] Warning: extension "uuid-ossp" does not exist, statement: "COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';"
[Schema] Warning: type "aal_level" already exists, statement: "CREATE TYPE auth.aal_level AS ENUM (
'aal1',
'aal2',
'aal3'
);"
[Schema] Warning: type "code_challenge_method" already exists, statement: "CREATE TYPE auth.code_challenge_method AS ENUM (
's256',
'plain'
);"
[Schema] Warning: type "factor_status" already exists, statement: "CREATE TYPE auth.factor_status AS ENUM (
'unverified',
'verified'
);"
[Schema] Warning: type "factor_type" already exists, statement: "CREATE TYPE auth.factor_type AS ENUM (
'totp',
'webauthn'
);"
[Schema] Warning: function "email" already exists with same argument types, statement: "CREATE FUNCTION auth.email() RETURNS text
LANGUAGE sql STABLE
AS $$
select
coalesce(
nullif(current_setting('request.jwt.claim.email', true), ''),
(nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')
)::text
$$;"
[Schema] Warning: function "jwt" already exists with same argument types, statement: "CREATE FUNCTION auth.jwt() RETURNS jsonb
LANGUAGE sql STABLE
AS $$
select
coalesce(
nullif(current_setting('request.jwt.claim', true), ''),
nullif(current_setting('request.jwt.claims', true), '')
)::jsonb
$$;"
[Schema] Warning: function "role" already exists with same argument types, statement: "CREATE FUNCTION auth.role() RETURNS text
LANGUAGE sql STABLE
AS $$
select
coalesce(
nullif(current_setting('request.jwt.claim.role', true), ''),
(nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')
)::text
$$;"
[Schema] Warning: function "uid" already exists with same argument types, statement: "CREATE FUNCTION auth.uid() RETURNS uuid
LANGUAGE sql STABLE
AS $$
select
coalesce(
nullif(current_setting('request.jwt.claim.sub', true), ''),
(nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
)::uuid
$$;"
[Schema] Warning: relation "audit_log_entries" already exists, statement: "CREATE TABLE auth.audit_log_entries (
instance_id uuid,
id uuid NOT NULL,
payload json,
created_at timestamp with time zone,
ip_address character varying(64) DEFAULT ''::character varying NOT NULL
);"
[Schema] Warning: relation "flow_state" already exists, statement: "CREATE TABLE auth.flow_state (
id uuid NOT NULL,
user_id uuid,
auth_code text NOT NULL,
code_challenge_method auth.code_challenge_method NOT NULL,
code_challenge text NOT NULL,
provider_type text NOT NULL,
provider_access_token text,
provider_refresh_token text,
created_at timestamp with time zone,
updated_at timestamp with time zone,
authentication_method text NOT NULL
);"
[Schema] Warning: relation "identities" already exists, statement: "CREATE TABLE auth.identities (
provider_id text NOT NULL,
user_id uuid NOT NULL,
identity_data jsonb NOT NULL,
provider text NOT NULL,
last_sign_in_at timestamp with time zone,
created_at timestamp with time zone,
updated_at timestamp with time zone,
email text GENERATED ALWAYS AS (lower((identity_data ->> 'email'::text))) STORED,
id uuid DEFAULT gen_random_uuid() NOT NULL
);"
[Schema] Warning: relation "instances" already exists, statement: "CREATE TABLE auth.instances (
id uuid NOT NULL,
uuid uuid,
raw_base_config text,
created_at timestamp with time zone,
updated_at timestamp with time zone
);"
[Schema] Warning: relation "mfa_amr_claims" already exists, statement: "CREATE TABLE auth.mfa_amr_claims (
session_id uuid NOT NULL,
created_at timestamp with time zone NOT NULL,
updated_at timestamp with time zone NOT NULL,
authentication_method text NOT NULL,
id uuid NOT NULL
);"
[Schema] Warning: relation "mfa_challenges" already exists, statement: "CREATE TABLE auth.mfa_challenges (
id uuid NOT NULL,
factor_id uuid NOT NULL,
created_at timestamp with time zone NOT NULL,
verified_at timestamp with time zone,
ip_address inet NOT NULL
);"
[Schema] Warning: relation "mfa_factors" already exists, statement: "CREATE TABLE auth.mfa_factors (
id uuid NOT NULL,
user_id uuid NOT NULL,
friendly_name text,
factor_type auth.factor_type NOT NULL,
status auth.factor_status NOT NULL,
created_at timestamp with time zone NOT NULL,
updated_at timestamp with time zone NOT NULL,
secret text
);"
[Schema] Warning: relation "refresh_tokens" already exists, statement: "CREATE TABLE auth.refresh_tokens (
instance_id uuid,
id bigint NOT NULL,
token character varying(255),
user_id character varying(255),
revoked boolean,
created_at timestamp with time zone,
updated_at timestamp with time zone,
parent character varying(255),
session_id uuid
);"
[Schema] Warning: relation "refresh_tokens_id_seq" already exists, statement: "CREATE SEQUENCE auth.refresh_tokens_id_seq
START WITH 1
INCREMENT BY 1
NO MINVALUE
NO MAXVALUE
CACHE 1;"
[Schema] Warning: relation "saml_providers" already exists, statement: "CREATE TABLE auth.saml_providers (
id uuid NOT NULL,
sso_provider_id uuid NOT NULL,
entity_id text NOT NULL,
metadata_xml text NOT NULL,
metadata_url text,
attribute_mapping jsonb,
created_at timestamp with time zone,
updated_at timestamp with time zone,
CONSTRAINT "entity_id not empty" CHECK ((char_length(entity_id) > 0)),
CONSTRAINT "metadata_url not empty" CHECK (((metadata_url = NULL::text) OR (char_length(metadata_url) > 0))),
CONSTRAINT "metadata_xml not empty" CHECK ((char_length(metadata_xml) > 0))
);"
[Schema] Warning: relation "saml_relay_states" already exists, statement: "CREATE TABLE auth.saml_relay_states (
id uuid NOT NULL,
sso_provider_id uuid NOT NULL,
request_id text NOT NULL,
for_email text,
redirect_to text,
from_ip_address inet,
created_at timestamp with time zone,
updated_at timestamp with time zone,
flow_state_id uuid,
CONSTRAINT "request_id not empty" CHECK ((char_length(request_id) > 0))
);"
[Schema] Warning: relation "schema_migrations" already exists, statement: "CREATE TABLE auth.schema_migrations (
version character varying(255) NOT NULL
);"
[Schema] Warning: relation "sessions" already exists, statement: "CREATE TABLE auth.sessions (
id uuid NOT NULL,
user_id uuid NOT NULL,
created_at timestamp with time zone,
updated_at timestamp with time zone,
factor_id uuid,
aal auth.aal_level,
not_after timestamp with time zone,
refreshed_at timestamp without time zone,
user_agent text,
ip inet,
tag text
);"
[Schema] Warning: relation "sso_domains" already exists, statement: "CREATE TABLE auth.sso_domains (
id uuid NOT NULL,
sso_provider_id uuid NOT NULL,
domain text NOT NULL,
created_at timestamp with time zone,
updated_at timestamp with time zone,
CONSTRAINT "domain not empty" CHECK ((char_length(domain) > 0))
);"
[Schema] Warning: relation "sso_providers" already exists, statement: "CREATE TABLE auth.sso_providers (
id uuid NOT NULL,
resource_id text,
created_at timestamp with time zone,
updated_at timestamp with time zone,
CONSTRAINT "resource_id not empty" CHECK (((resource_id = NULL::text) OR (char_length(resource_id) > 0)))
);"
[Schema] Warning: relation "users" already exists, statement: "CREATE TABLE auth.users (
instance_id uuid,
id uuid NOT NULL,
aud character varying(255),
role character varying(255),
email character varying(255),
encrypted_password character varying(255),
email_confirmed_at timestamp with time zone,
invited_at timestamp with time zone,
confirmation_token character varying(255),
confirmation_sent_at timestamp with time zone,
recovery_token character varying(255),
recovery_sent_at timestamp with time zone,
email_change_token_new character varying(255),
email_change character varying(255),
email_change_sent_at timestamp with time zone,
last_sign_in_at timestamp with time zone,
raw_app_meta_data jsonb,
raw_user_meta_data jsonb,
is_super_admin boolean,
created_at timestamp with time zone,
updated_at timestamp with time zone,
phone text DEFAULT NULL::character varying,
phone_confirmed_at timestamp with time zone,
phone_change text DEFAULT ''::character varying,
phone_change_token character varying(255) DEFAULT ''::character varying,
phone_change_sent_at timestamp with time zone,
confirmed_at timestamp with time zone GENERATED ALWAYS AS (LEAST(email_confirmed_at, phone_confirmed_at)) STORED,
email_change_token_current character varying(255) DEFAULT ''::character varying,
email_change_confirm_status smallint DEFAULT 0,
banned_until timestamp with time zone,
reauthentication_token character varying(255) DEFAULT ''::character varying,
reauthentication_sent_at timestamp with time zone,
is_sso_user boolean DEFAULT false NOT NULL,
deleted_at timestamp with time zone,
CONSTRAINT users_email_change_confirm_status_check CHECK (((email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)))
);"
[Schema] Warning: multiple primary keys for table "mfa_amr_claims" are not allowed, statement: "ALTER TABLE ONLY auth.mfa_amr_claims
ADD CONSTRAINT amr_id_pk PRIMARY KEY (id);"
[Schema] Warning: multiple primary keys for table "audit_log_entries" are not allowed, statement: "ALTER TABLE ONLY auth.audit_log_entries
ADD CONSTRAINT audit_log_entries_pkey PRIMARY KEY (id);"
[Schema] Warning: multiple primary keys for table "flow_state" are not allowed, statement: "ALTER TABLE ONLY auth.flow_state
ADD CONSTRAINT flow_state_pkey PRIMARY KEY (id);"
[Schema] Warning: multiple primary keys for table "identities" are not allowed, statement: "ALTER TABLE ONLY auth.identities
ADD CONSTRAINT identities_pkey PRIMARY KEY (id);"
[Schema] Warning: relation "identities_provider_id_provider_unique" already exists, statement: "ALTER TABLE ONLY auth.identities
ADD CONSTRAINT identities_provider_id_provider_unique UNIQUE (provider_id, provider);"
[Schema] Warning: multiple primary keys for table "instances" are not allowed, statement: "ALTER TABLE ONLY auth.instances
ADD CONSTRAINT instances_pkey PRIMARY KEY (id);"
[Schema] Warning: relation "mfa_amr_claims_session_id_authentication_method_pkey" already exists, statement: "ALTER TABLE ONLY auth.mfa_amr_claims
ADD CONSTRAINT mfa_amr_claims_session_id_authentication_method_pkey UNIQUE (session_id, authentication_method);"
[Schema] Warning: multiple primary keys for table "mfa_challenges" are not allowed, statement: "ALTER TABLE ONLY auth.mfa_challenges
ADD CONSTRAINT mfa_challenges_pkey PRIMARY KEY (id);"
[Schema] Warning: multiple primary keys for table "mfa_factors" are not allowed, statement: "ALTER TABLE ONLY auth.mfa_factors
ADD CONSTRAINT mfa_factors_pkey PRIMARY KEY (id);"
[Schema] Warning: multiple primary keys for table "refresh_tokens" are not allowed, statement: "ALTER TABLE ONLY auth.refresh_tokens
ADD CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id);"
[Schema] Warning: relation "refresh_tokens_token_unique" already exists, statement: "ALTER TABLE ONLY auth.refresh_tokens
ADD CONSTRAINT refresh_tokens_token_unique UNIQUE (token);"
[Schema] Warning: relation "saml_providers_entity_id_key" already exists, statement: "ALTER TABLE ONLY auth.saml_providers
ADD CONSTRAINT saml_providers_entity_id_key UNIQUE (entity_id);"
[Schema] Warning: multiple primary keys for table "saml_providers" are not allowed, statement: "ALTER TABLE ONLY auth.saml_providers
ADD CONSTRAINT saml_providers_pkey PRIMARY KEY (id);"
[Schema] Warning: multiple primary keys for table "saml_relay_states" are not allowed, statement: "ALTER TABLE ONLY auth.saml_relay_states
ADD CONSTRAINT saml_relay_states_pkey PRIMARY KEY (id);"
[Schema] Warning: multiple primary keys for table "schema_migrations" are not allowed, statement: "ALTER TABLE ONLY auth.schema_migrations
ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);"
[Schema] Warning: multiple primary keys for table "sessions" are not allowed, statement: "ALTER TABLE ONLY auth.sessions
ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);"
[Schema] Warning: multiple primary keys for table "sso_domains" are not allowed, statement: "ALTER TABLE ONLY auth.sso_domains
ADD CONSTRAINT sso_domains_pkey PRIMARY KEY (id);"
[Schema] Warning: multiple primary keys for table "sso_providers" are not allowed, statement: "ALTER TABLE ONLY auth.sso_providers
ADD CONSTRAINT sso_providers_pkey PRIMARY KEY (id);"
[Schema] Warning: relation "users_phone_key" already exists, statement: "ALTER TABLE ONLY auth.users
ADD CONSTRAINT users_phone_key UNIQUE (phone);"
[Schema] Warning: multiple primary keys for table "users" are not allowed, statement: "ALTER TABLE ONLY auth.users
ADD CONSTRAINT users_pkey PRIMARY KEY (id);"
[Schema] Warning: relation "audit_logs_instance_id_idx" already exists, statement: "CREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id);"
[Schema] Warning: relation "confirmation_token_idx" already exists, statement: "CREATE UNIQUE INDEX confirmation_token_idx ON auth.users USING btree (confirmation_token) WHERE ((confirmation_token)::text !~ '^[0-9 ]*$'::text);"
[Schema] Warning: relation "email_change_token_current_idx" already exists, statement: "CREATE UNIQUE INDEX email_change_token_current_idx ON auth.users USING btree (email_change_token_current) WHERE ((email_change_token_current)::text !~ '^[0-9 ]*$'::text);"
[Schema] Warning: relation "email_change_token_new_idx" already exists, statement: "CREATE UNIQUE INDEX email_change_token_new_idx ON auth.users USING btree (email_change_token_new) WHERE ((email_change_token_new)::text !~ '^[0-9 ]*$'::text);"
[Schema] Warning: relation "factor_id_created_at_idx" already exists, statement: "CREATE INDEX factor_id_created_at_idx ON auth.mfa_factors USING btree (user_id, created_at);"
[Schema] Warning: relation "flow_state_created_at_idx" already exists, statement: "CREATE INDEX flow_state_created_at_idx ON auth.flow_state USING btree (created_at DESC);"
[Schema] Warning: relation "identities_email_idx" already exists, statement: "CREATE INDEX identities_email_idx ON auth.identities USING btree (email text_pattern_ops);"
[Schema] Warning: relation "identities_user_id_idx" already exists, statement: "CREATE INDEX identities_user_id_idx ON auth.identities USING btree (user_id);"
[Schema] Warning: relation "idx_auth_code" already exists, statement: "CREATE INDEX idx_auth_code ON auth.flow_state USING btree (auth_code);"
[Schema] Warning: relation "idx_user_id_auth_method" already exists, statement: "CREATE INDEX idx_user_id_auth_method ON auth.flow_state USING btree (user_id, authentication_method);"
[Schema] Warning: relation "mfa_challenge_created_at_idx" already exists, statement: "CREATE INDEX mfa_challenge_created_at_idx ON auth.mfa_challenges USING btree (created_at DESC);"
[Schema] Warning: relation "mfa_factors_user_friendly_name_unique" already exists, statement: "CREATE UNIQUE INDEX mfa_factors_user_friendly_name_unique ON auth.mfa_factors USING btree (friendly_name, user_id) WHERE (TRIM(BOTH FROM friendly_name) <> ''::text);"
[Schema] Warning: relation "mfa_factors_user_id_idx" already exists, statement: "CREATE INDEX mfa_factors_user_id_idx ON auth.mfa_factors USING btree (user_id);"
[Schema] Warning: relation "reauthentication_token_idx" already exists, statement: "CREATE UNIQUE INDEX reauthentication_token_idx ON auth.users USING btree (reauthentication_token) WHERE ((reauthentication_token)::text !~ '^[0-9 ]*$'::text);"
[Schema] Warning: relation "recovery_token_idx" already exists, statement: "CREATE UNIQUE INDEX recovery_token_idx ON auth.users USING btree (recovery_token) WHERE ((recovery_token)::text !~ '^[0-9 ]*$'::text);"
[Schema] Warning: relation "refresh_tokens_instance_id_idx" already exists, statement: "CREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id);"
[Schema] Warning: relation "refresh_tokens_instance_id_user_id_idx" already exists, statement: "CREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id);"
[Schema] Warning: relation "refresh_tokens_parent_idx" already exists, statement: "CREATE INDEX refresh_tokens_parent_idx ON auth.refresh_tokens USING btree (parent);"
[Schema] Warning: relation "refresh_tokens_session_id_revoked_idx" already exists, statement: "CREATE INDEX refresh_tokens_session_id_revoked_idx ON auth.refresh_tokens USING btree (session_id, revoked);"
[Schema] Warning: relation "refresh_tokens_updated_at_idx" already exists, statement: "CREATE INDEX refresh_tokens_updated_at_idx ON auth.refresh_tokens USING btree (updated_at DESC);"
[Schema] Warning: relation "saml_providers_sso_provider_id_idx" already exists, statement: "CREATE INDEX saml_providers_sso_provider_id_idx ON auth.saml_providers USING btree (sso_provider_id);"
[Schema] Warning: relation "saml_relay_states_created_at_idx" already exists, statement: "CREATE INDEX saml_relay_states_created_at_idx ON auth.saml_relay_states USING btree (created_at DESC);"
[Schema] Warning: relation "saml_relay_states_for_email_idx" already exists, statement: "CREATE INDEX saml_relay_states_for_email_idx ON auth.saml_relay_states USING btree (for_email);"
[Schema] Warning: relation "saml_relay_states_sso_provider_id_idx" already exists, statement: "CREATE INDEX saml_relay_states_sso_provider_id_idx ON auth.saml_relay_states USING btree (sso_provider_id);"
[Schema] Warning: relation "sessions_not_after_idx" already exists, statement: "CREATE INDEX sessions_not_after_idx ON auth.sessions USING btree (not_after DESC);"
[Schema] Warning: relation "sessions_user_id_idx" already exists, statement: "CREATE INDEX sessions_user_id_idx ON auth.sessions USING btree (user_id);"
[Schema] Warning: relation "sso_domains_domain_idx" already exists, statement: "CREATE UNIQUE INDEX sso_domains_domain_idx ON auth.sso_domains USING btree (lower(domain));"
[Schema] Warning: relation "sso_domains_sso_provider_id_idx" already exists, statement: "CREATE INDEX sso_domains_sso_provider_id_idx ON auth.sso_domains USING btree (sso_provider_id);"
[Schema] Warning: relation "sso_providers_resource_id_idx" already exists, statement: "CREATE UNIQUE INDEX sso_providers_resource_id_idx ON auth.sso_providers USING btree (lower(resource_id));"
[Schema] Warning: relation "user_id_created_at_idx" already exists, statement: "CREATE INDEX user_id_created_at_idx ON auth.sessions USING btree (user_id, created_at);"
[Schema] Warning: relation "users_email_partial_key" already exists, statement: "CREATE UNIQUE INDEX users_email_partial_key ON auth.users USING btree (email) WHERE (is_sso_user = false);"
[Schema] Warning: relation "users_instance_id_email_idx" already exists, statement: "CREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, lower((email)::text));"
[Schema] Warning: relation "users_instance_id_idx" already exists, statement: "CREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id);"
[Schema] Warning: constraint "identities_user_id_fkey" for relation "identities" already exists, statement: "ALTER TABLE ONLY auth.identities
ADD CONSTRAINT identities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;"
[Schema] Warning: constraint "mfa_amr_claims_session_id_fkey" for relation "mfa_amr_claims" already exists, statement: "ALTER TABLE ONLY auth.mfa_amr_claims
ADD CONSTRAINT mfa_amr_claims_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;"
[Schema] Warning: constraint "mfa_challenges_auth_factor_id_fkey" for relation "mfa_challenges" already exists, statement: "ALTER TABLE ONLY auth.mfa_challenges
ADD CONSTRAINT mfa_challenges_auth_factor_id_fkey FOREIGN KEY (factor_id) REFERENCES auth.mfa_factors(id) ON DELETE CASCADE;"
[Schema] Warning: constraint "mfa_factors_user_id_fkey" for relation "mfa_factors" already exists, statement: "ALTER TABLE ONLY auth.mfa_factors
ADD CONSTRAINT mfa_factors_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;"
[Schema] Warning: constraint "refresh_tokens_session_id_fkey" for relation "refresh_tokens" already exists, statement: "ALTER TABLE ONLY auth.refresh_tokens
ADD CONSTRAINT refresh_tokens_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;"
[Schema] Warning: constraint "saml_providers_sso_provider_id_fkey" for relation "saml_providers" already exists, statement: "ALTER TABLE ONLY auth.saml_providers
ADD CONSTRAINT saml_providers_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;"
[Schema] Warning: constraint "saml_relay_states_flow_state_id_fkey" for relation "saml_relay_states" already exists, statement: "ALTER TABLE ONLY auth.saml_relay_states
ADD CONSTRAINT saml_relay_states_flow_state_id_fkey FOREIGN KEY (flow_state_id) REFERENCES auth.flow_state(id) ON DELETE CASCADE;"
[Schema] Warning: constraint "saml_relay_states_sso_provider_id_fkey" for relation "saml_relay_states" already exists, statement: "ALTER TABLE ONLY auth.saml_relay_states
ADD CONSTRAINT saml_relay_states_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;"
[Schema] Warning: constraint "sessions_user_id_fkey" for relation "sessions" already exists, statement: "ALTER TABLE ONLY auth.sessions
ADD CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;"
[Schema] Warning: constraint "sso_domains_sso_provider_id_fkey" for relation "sso_domains" already exists, statement: "ALTER TABLE ONLY auth.sso_domains
ADD CONSTRAINT sso_domains_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;"
[Schema] Warning: publication "supabase_realtime" already exists, statement: "CREATE PUBLICATION supabase_realtime WITH (publish = 'insert, update, delete, truncate');"
[Schema] Warning: permission denied to create event trigger "issue_graphql_placeholder", statement: "CREATE EVENT TRIGGER issue_graphql_placeholder ON sql_drop
WHEN TAG IN ('DROP EXTENSION')
EXECUTE FUNCTION extensions.set_graphql_placeholder();"
[Schema] Warning: permission denied to create event trigger "issue_pg_cron_access", statement: "CREATE EVENT TRIGGER issue_pg_cron_access ON ddl_command_end
WHEN TAG IN ('CREATE EXTENSION')
EXECUTE FUNCTION extensions.grant_pg_cron_access();"
[Schema] Warning: permission denied to create event trigger "issue_pg_graphql_access", statement: "CREATE EVENT TRIGGER issue_pg_graphql_access ON ddl_command_end
WHEN TAG IN ('CREATE FUNCTION')
EXECUTE FUNCTION extensions.grant_pg_graphql_access();"
[Schema] Warning: permission denied to create event trigger "issue_pg_net_access", statement: "CREATE EVENT TRIGGER issue_pg_net_access ON ddl_command_end
WHEN TAG IN ('CREATE EXTENSION')
EXECUTE FUNCTION extensions.grant_pg_net_access();"
[Schema] Warning: permission denied to create event trigger "pgrst_ddl_watch", statement: "CREATE EVENT TRIGGER pgrst_ddl_watch ON ddl_command_end
EXECUTE FUNCTION extensions.pgrst_ddl_watch();"
[Schema] Warning: permission denied to create event trigger "pgrst_drop_watch", statement: "CREATE EVENT TRIGGER pgrst_drop_watch ON sql_drop
EXECUTE FUNCTION extensions.pgrst_drop_watch();"
[Create constraints] Warning: check constraint "users_email_change_confirm_status_check" of relation "users" is violated by some row (auth.users)
[Create constraints] Warning: insert or update on table "notes" violates foreign key constraint "notes_user_id_fkey" (public.notes)
[Create constraints] Warning: insert or update on table "progress" violates foreign key constraint "progress_user_id_fkey" (public.progress)